package in.Ashokit.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import in.Ashokit.Binding.Courses;
import in.Ashokit.Binding.Student;
import in.Ashokit.entity.Enrollment;
import in.Ashokit.feign.Coursefeign;
import in.Ashokit.feign.Studentclient;
import in.Ashokit.service.EnrollmentService;


@RestController
public class EnrollmentController {

	 @Autowired
	   private EnrollmentService eservice;
	 @Autowired
	 private Coursefeign cclient;
	 @Autowired
	 private Studentclient sclient;
	 
	 @GetMapping("/getstudent/{id}")
	 public ResponseEntity<Optional<Student>> getStudentById(@PathVariable Long id) {
	     
	     return sclient.getstudent(id);
	 }
	
	 /*
	 @PostMapping("/enroll")
	    public ResponseEntity<String> enrollStudentInCourse(@RequestBody Enrollment enrollment) {
	        try {
	           if(sclient.existbyid(enrollment.getStudentid())!=null) {
	        	   return new ResponseEntity<>("Student not Found",HttpStatus.BAD_REQUEST);
	           }

	           if(cclient.existbyid(enrollment.getCouseid())!=null) {
	        	   return new ResponseEntity<>("Course  not Found",HttpStatus.BAD_REQUEST);
	           }
	            eservice.enrollment(enrollment);
	            return new ResponseEntity<>("Student enrolled in course successfully",HttpStatus.OK);
	        } catch (Exception e) {
	            return ResponseEntity.status(500).body("An error occurred while enrolling the student in the course: " + e.getMessage());
	        }
	    }*/
	 @PostMapping("/enroll")
	    public ResponseEntity<String> enrollStudentInCourse(@RequestBody Enrollment enrollment) {
	        try {
	 
	 if(!sclient.existbyid(enrollment.getStudentid()).getBody()) {
		 
		 return new ResponseEntity<>("Student  not found ",HttpStatus.BAD_REQUEST);
	 }
	 if(!cclient.existbyid(enrollment.getCouseid()).getBody()) {
		 
		 return new ResponseEntity<>("Course not found",HttpStatus.BAD_REQUEST);
	 }
	 
	      eservice.enrollment(enrollment)  ;
	      return new ResponseEntity<>("saved",HttpStatus.OK);
		}catch (Exception e) {
            return ResponseEntity.status(500).body("An error occurred while enrolling the student in the course: " + e.getMessage());
        }
	 }
	
	 /*
	 @GetMapping("/getbyid/{studentid}/{couseid}")
	 public ResponseEntity<List<Enrollment>> findbyid(@PathVariable Long studentid,@PathVariable Long couseid){
		 
		
		        if (sclient.getstudent(studentid) == null) {
		            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		        }
		        if (cclient.getbyid(couseid).getBody() == null) {
		            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		        }
		        
		       List<Enrollment> getbyid = eservice.getbyid(studentid, couseid);
		       return new ResponseEntity<>(getbyid,HttpStatus.OK);
		        
	 
}*/
	 
	 @GetMapping("/getbyid/{studentid}/{courseid}")
	 public ResponseEntity<?> findbyid(@PathVariable Long studentid, @PathVariable Long couseid) {
	     try {
	         ResponseEntity<Optional<Student>> studentResponse = sclient.getstudent(studentid);
	         if (studentResponse.getStatusCode() == HttpStatus.NOT_FOUND) {
	             return new ResponseEntity<>("Student not found", HttpStatus.BAD_REQUEST);
	         } else if (studentResponse.getStatusCode() == HttpStatus.OK) {
	              ResponseEntity<Optional<Courses>> getbyid = cclient.getbyid(couseid);
	             if (getbyid.getStatusCode() == HttpStatus.NOT_FOUND) {
	                 return new ResponseEntity<>("Course not found", HttpStatus.BAD_REQUEST);
	             } else if (getbyid.getStatusCode() == HttpStatus.OK) {
	                 List<Enrollment> enrollments = eservice.getbyid(studentid, couseid);
	                 return ResponseEntity.ok(enrollments);
	             } else {
	                 return new ResponseEntity<>("An error occurred while fetching the course", HttpStatus.INTERNAL_SERVER_ERROR);
	             }
	         } else {
	             return new ResponseEntity<>("An error occurred while fetching the student", HttpStatus.INTERNAL_SERVER_ERROR);
	         }
	     } catch (Exception e) {
	         return new ResponseEntity<>("An error occurred while fetching the student or course", HttpStatus.INTERNAL_SERVER_ERROR);
	     }
	 }
	
}
